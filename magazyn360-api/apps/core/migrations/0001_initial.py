# Generated by Django 5.2 on 2025-05-10 15:28

import apps.core.validators
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[apps.core.validators.PolishPhoneNumberValidator()],
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("viewer", "Viewer"),
                            ("worker", "Worker"),
                            ("manager", "Manager"),
                            ("admin", "Admin"),
                            ("owner", "Owner"),
                        ],
                        default="viewer",
                    ),
                ),
                ("position", models.CharField(blank=True, max_length=50)),
                ("department", models.CharField(blank=True, max_length=50)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Company",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Company Name")),
                (
                    "tax_id",
                    models.CharField(
                        max_length=20,
                        validators=[apps.core.validators.NIPValidator()],
                        verbose_name="Tax ID (NIP)",
                    ),
                ),
                (
                    "statistical_number",
                    models.CharField(
                        max_length=20,
                        validators=[apps.core.validators.REGONValidator()],
                        verbose_name="Statistical Number (REGON)",
                    ),
                ),
                (
                    "national_court_register",
                    models.CharField(
                        max_length=20,
                        validators=[apps.core.validators.KRSValidator()],
                        verbose_name="National Court Register (KRS)",
                    ),
                ),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                (
                    "phone",
                    models.CharField(
                        max_length=20,
                        validators=[apps.core.validators.PolishPhoneNumberValidator()],
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "website",
                    models.URLField(blank=True, default="", verbose_name="Website"),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="owned_companies",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Owner",
                    ),
                ),
            ],
            options={
                "verbose_name": "Company",
                "verbose_name_plural": "Companies",
            },
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("office", "Office"),
                            ("billing", "Billing"),
                            ("shipping", "Shipping"),
                            ("warehouse", "Warehouse"),
                            ("factory", "Factory"),
                            ("head_office", "Head Office"),
                            ("other", "Other"),
                        ],
                        default="billing",
                        max_length=50,
                        verbose_name="Address Type",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Address Name")),
                ("street", models.CharField(max_length=255, verbose_name="Street")),
                ("city", models.CharField(max_length=100, verbose_name="City")),
                (
                    "postal_code",
                    models.CharField(max_length=20, verbose_name="Postal Code"),
                ),
                (
                    "country",
                    models.CharField(
                        choices=[
                            ("poland", "Poland"),
                            ("germany", "Germany"),
                            ("france", "France"),
                            ("spain", "Spain"),
                            ("italy", "Italy"),
                            ("uk", "United Kingdom"),
                            ("usa", "United States"),
                            ("austria", "Austria"),
                            ("belgium", "Belgium"),
                            ("netherlands", "Netherlands"),
                            ("switzerland", "Switzerland"),
                            ("czech_republic", "Czech Republic"),
                            ("slovakia", "Slovakia"),
                            ("hungary", "Hungary"),
                            ("slovenia", "Slovenia"),
                            ("croatia", "Croatia"),
                            ("bulgaria", "Bulgaria"),
                            ("romania", "Romania"),
                            ("portugal", "Portugal"),
                            ("sweden", "Sweden"),
                            ("finland", "Finland"),
                            ("denmark", "Denmark"),
                            ("norway", "Norway"),
                            ("ireland", "Ireland"),
                        ],
                        default="poland",
                        verbose_name="Country",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to="core.company",
                        verbose_name="Company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Address",
                "verbose_name_plural": "Addresses",
            },
        ),
        migrations.AddField(
            model_name="customuser",
            name="company",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="users",
                to="core.company",
            ),
        ),
        migrations.AddIndex(
            model_name="company",
            index=models.Index(fields=["tax_id"], name="core_compan_tax_id_6b75d2_idx"),
        ),
        migrations.AddIndex(
            model_name="company",
            index=models.Index(fields=["email"], name="core_compan_email_511913_idx"),
        ),
        migrations.AddIndex(
            model_name="company",
            index=models.Index(
                fields=["national_court_register"],
                name="core_compan_nationa_a15f29_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="company",
            constraint=models.UniqueConstraint(
                fields=("tax_id",), name="unique_tax_id"
            ),
        ),
        migrations.AddConstraint(
            model_name="company",
            constraint=models.UniqueConstraint(
                fields=("email",), name="unique_company_email"
            ),
        ),
        migrations.AddConstraint(
            model_name="company",
            constraint=models.UniqueConstraint(
                fields=("national_court_register",), name="unique_krs"
            ),
        ),
        migrations.AddIndex(
            model_name="address",
            index=models.Index(fields=["type"], name="core_addres_type_afa414_idx"),
        ),
        migrations.AddIndex(
            model_name="address",
            index=models.Index(
                fields=["company", "type"], name="core_addres_company_b68dd1_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="address",
            constraint=models.UniqueConstraint(
                condition=models.Q(("type", "billing")),
                fields=("company", "type"),
                name="unique_billing_address",
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(fields=["email"], name="core_custom_email_a5d01e_idx"),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(fields=["role"], name="core_custom_role_77f64b_idx"),
        ),
    ]
