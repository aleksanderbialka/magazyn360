name: Magazyn360 CI/CD -- MAIN workflow 🦁
run-name: ${{ github.event.head_commit.message }} -- ${{ github.actor}} 🦁

on:
  workflow_dispatch:
    inputs:
      build_image:
        description: "Build image?"
        required: true
        default: "true"
      operation:
        description: "Choose operation (Install/Uninstall/Reinstall)"
        required: true
        default: "Reinstall"
        type: choice
        options:
          - Install
          - Uninstall
          - Reinstall
  push:
    branches: ["master", "dev", "cicd", "deploy"]

permissions:
  checks: write
  contents: read
  packages: write

jobs:
  lint:
    name: Lint with Ruff and Black
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 🐍
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry 📘
        run: pip install poetry==1.8.5

      - name: Install dependencies for linting
        working-directory: magazyn360-api
        run: poetry install --only dev

      - name: Run Ruff
        working-directory: magazyn360-api
        run: poetry run ruff check .

      - name: Run Black (check only) ⚫️
        working-directory: magazyn360-api
        run: poetry run black --check .

  build-and-tests:
    name: Build for test and push to JFrog 🐸
    runs-on: ubuntu-latest
    needs: lint

    steps:

      - name: Set Tag to Docker Image 📦
        run: |
          echo "IMAGE_NAME=${{ vars.IMAGE_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${{ secrets.JFROG_REGISTRY }}/${{ secrets.JFROG_REPO }}/${{ vars.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Set up Docker Buildx 🛠️
        uses: docker/setup-buildx-action@v3

      - name: Create Docker network
        run: docker network create gha-network

      - name: Start Postgres
        run: |
          docker run -d \
            --name postgres \
            --network gha-network \
            -e POSTGRES_DB=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=password \
            -p 5432:5432 \
            postgres:15

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            docker exec postgres pg_isready -U postgres && break
            sleep 1
          done

      - name:  Build Docker image 🐳
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG -f ./magazyn360-api/Dockerfile ./magazyn360-api

      - name: Launch Docker container and run tests 🧪
        run: |
          docker run --rm \
            --network gha-network \
            -e SECRET_KEY=testsecret \
            -e DEBUG=False \
            -e POSTGRES_DB=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_HOST=postgres \
            -e POSTGRES_PORT=5432 \
            -v ${{ github.workspace }}/results:/var/www/magazyn360/app/magazyn360-api/results \
            -v ${{ github.workspace }}/htmlcov:/var/www/magazyn360/app/magazyn360-api/htmlcov \
            $IMAGE_NAME:$IMAGE_TAG \
            /var/www/magazyn360/app/magazyn360-api/bin/run_tests.sh

      - name: Publish test report in GitHub UI
        uses: dorny/test-reporter@v1
        if: always()
        with:
              name: Pytest Test Results
              path: results/pytest-results.xml
              reporter: java-junit

      - name: Upload Coverage HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: htmlcov

      - name: Upload HTML test report 📄
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-html-report
          path: results/pytest-report.html

      - name: Login to JFrog
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.JFROG_REGISTRY }}
          username: ${{ secrets.JFROG_USERNAME }}
          password: ${{ secrets.JFROG_PASSWORD }}

      - name: Push Docker image to JFrog 🐸
        if: github.event.inputs.build_image != 'false'
        run: |
          docker tag $IMAGE_NAME:$IMAGE_TAG $FULL_IMAGE_NAME
          docker push $FULL_IMAGE_NAME

  deploy:
    name: Deploy to Kubernetes via Helm ⚙️
    runs-on: ubuntu-latest
    needs: build-and-tests

    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Set up KUBECONFIG from base64 secret 🔐
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > ~/.kube/config

      - name: Decode Helm secrets.yaml 🔐
        run: |
          echo "${{ secrets.HELM_SECRETS_YAML2 }}" | base64 -d > helm-chart/secrets.yaml

      - name: Helm ${{ github.event.inputs.operation || 'Reinstall' }} 🚀
        run: |
          helm upgrade --install magazyn360 ./magazyn360-api/helm-chart \
            -n magazyn360 --create-namespace \
            --set image.repository=${{ secrets.JFROG_REGISTRY }}/${{ secrets.JFROG_REPO }}/${{ vars.IMAGE_NAME }} \
            --set image.tag=${{ github.ref_name }} \
            -f helm-chart/values.yaml \
            -f helm-chart/secrets.yaml
